<?php

namespace App\Models {

    /**
     * App\Models\DespositDetails
     *
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails query()
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails clone()
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|DespositDetails|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class DespositDetails extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Download
     *
     * @method static \Illuminate\Database\Eloquent\Builder|Download newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Download newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Download query()
     * @method static \Illuminate\Database\Eloquent\Builder|Download select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Download selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Download selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Download fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Download fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Download addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Download distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Download from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Download useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Download forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Download ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Download join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Download joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Download joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Download joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Download leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Download leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Download leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Download leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Download rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Download rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Download rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Download crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Download crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Download mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Download where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Download addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Download addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Download groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Download having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Download havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Download havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Download havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Download latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Download oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Download inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Download orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Download skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Download forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Download forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Download forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Download reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Download union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Download unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Download lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Download sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Download beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Download afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Download setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Download addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Download mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Download useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Download clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Download cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Download cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Download dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Download dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Download tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Download|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Download|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Download extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Help
     *
     * @property-read \App\Models\HelpCategory $category
     * @method static \Illuminate\Database\Eloquent\Builder|Help newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Help newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Help query()
     * @method static \Illuminate\Database\Eloquent\Builder|Help select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Help selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Help selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Help fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Help fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Help addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Help distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Help from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Help useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Help forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Help ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Help join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Help joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Help joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Help joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Help leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Help leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Help leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Help leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Help rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Help rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Help rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Help crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Help crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Help mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Help where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Help addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Help addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Help groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Help having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Help havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Help havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Help havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Help latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Help oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Help inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Help orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Help skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Help forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Help forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Help forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Help reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Help union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Help unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Help lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Help sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Help beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Help afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Help setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Help addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Help mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Help useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Help clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Help cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Help cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Help dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Help dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Help tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Help|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Help|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Help extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\HelpCategory
     *
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory query()
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory clone()
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|HelpCategory|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class HelpCategory extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\IbPartnerRequest
     *
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest query()
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest clone()
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|IbPartnerRequest|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class IbPartnerRequest extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\PageView
     *
     * @method static \Illuminate\Database\Eloquent\Builder|PageView newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|PageView newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|PageView query()
     * @method static \Illuminate\Database\Eloquent\Builder|PageView select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|PageView from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|PageView addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|PageView sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|PageView beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|PageView afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|PageView setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|PageView useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|PageView clone()
     * @method static \Illuminate\Database\Eloquent\Builder|PageView cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|PageView|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class PageView extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Timezone
     *
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone query()
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone clone()
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|Timezone|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Timezone extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\TradingAccountRequest
     *
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest query()
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest clone()
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|TradingAccountRequest|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class TradingAccountRequest extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\User
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property string|null $profile_photo_path
     * @property mixed $current_team_id
     * @property string|null $remember_token
     * @property string|null $two_factor_confirmed_at
     * @property string|null $two_factor_recovery_codes
     * @property string|null $two_factor_secret
     * @property string $password
     * @property string|null $verification_code
     * @property bool $is_assign
     * @property string $watch_history
     * @property string|null $social_links
     * @property string|null $biography
     * @property string|null $title
     * @property string $wishlist
     * @property bool $is_instructor
     * @property string|null $five_min_demo
     * @property string|null $responsibilities
     * @property string|null $spare_time
     * @property string|null $hobbies
     * @property string|null $occupation
     * @property string|null $if_left
     * @property string|null $what_level
     * @property string|null $alquran_when
     * @property string|null $degree
     * @property string|null $goal
     * @property string|null $teach_timing
     * @property string|null $teach_course
     * @property string|null $training_course
     * @property string|null $other_course
     * @property string|null $doing_course
     * @property string|null $quran_course
     * @property string|null $teach_pattern
     * @property string|null $alquran
     * @property string|null $language
     * @property string|null $gender
     * @property mixed $age
     * @property mixed $pincode
     * @property string|null $address
     * @property string|null $phone_verified_at
     * @property string|null $phone
     * @property \Illuminate\Support\Carbon|null $email_verified_at
     * @property string $email
     * @property string|null $last_name
     * @property string $first_name
     * @property mixed $batch_id
     * @property mixed $course_id
     * @property mixed $city_id
     * @property mixed $state_id
     * @property mixed $country_id
     * @property mixed $role_id
     * @property int $id
     * @property-read mixed $status
     * @property-read mixed $name
     * @property-read mixed $is_i_b_partner
     * @property-read mixed $is_trading_account
     * @property-read mixed $profile_photo_url
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\UserTransferDetail> $transfer_details
     * @property-read int|null $transfer_details_count
     * @property-read \App\Models\UserKyc $kyc
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\UserPlanRequest> $pendingPlanRequests
     * @property-read int|null $pendingPlanRequests_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\UserDeposit> $deposits
     * @property-read int|null $deposits_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\UserWithdrawl> $withdrawls
     * @property-read int|null $withdrawls_count
     * @property-read \App\Models\IbPartnerRequest $ib_partnet_request
     * @property-read \App\Models\TradingAccountRequest $trading_account_request
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \Laravel\Sanctum\PersonalAccessToken> $tokens
     * @property-read int|null $tokens_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
     * @property-read int|null $notifications_count
     * @method static \Illuminate\Database\Eloquent\Builder|User whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereRoleId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereCountryId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereStateId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereCityId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereCourseId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereBatchId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereFirstName($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereLastName($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereEmailVerifiedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User wherePhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User wherePhoneVerifiedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereAddress($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User wherePincode($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereAge($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereGender($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereLanguage($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereAlquran($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereTeachPattern($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereQuranCourse($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereDoingCourse($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereOtherCourse($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereTrainingCourse($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereTeachCourse($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereTeachTiming($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereGoal($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereDegree($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereAlquranWhen($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereWhatLevel($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereIfLeft($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereOccupation($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereHobbies($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereSpareTime($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereResponsibilities($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereFiveMinDemo($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereIsInstructor($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereWishlist($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereTitle($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereBiography($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereSocialLinks($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereWatchHistory($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereIsAssign($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereVerificationCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User wherePassword($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereTwoFactorSecret($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereTwoFactorRecoveryCodes($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereTwoFactorConfirmedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereRememberToken($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereCurrentTeamId($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereProfilePhotoPath($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder|User newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|User newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|User query()
     * @method static \Illuminate\Database\Eloquent\Builder|User select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|User selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|User selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|User fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|User fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|User addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|User from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|User useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|User forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|User ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|User join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|User joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|User joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|User joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|User leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|User leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|User mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|User where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|User addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|User addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|User groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|User having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|User havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|User orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|User orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|User orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|User orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|User skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|User forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|User reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|User union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|User unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|User lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|User sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|User beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|User afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|User setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|User addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|User mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|User useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|User clone()
     * @method static \Illuminate\Database\Eloquent\Builder|User cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|User cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|User dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|User dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|User tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|User|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|User|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class User extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\UserDeposit
     *
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit query()
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit clone()
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|UserDeposit|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class UserDeposit extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\UserKyc
     *
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc query()
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc clone()
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|UserKyc|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class UserKyc extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\UserPlanRequest
     *
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest query()
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest clone()
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|UserPlanRequest|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class UserPlanRequest extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\UserTransferDetail
     *
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail query()
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail clone()
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|UserTransferDetail|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class UserTransferDetail extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\UserWithdrawl
     *
     * @property-read mixed $transfer
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl query()
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl fromRaw(string $expression, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl distinct()
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl dynamicWhere(string $method, array $parameters)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl havingBetween(string $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl afterQuery(\Closure $callback)
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static object|null find(int|string $id, array|string $columns)
     * @method static object|mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static int getCountForPagination(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static \Illuminate\Support\Collection<array-key,mixed> pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array|callable $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl useWritePdo()
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl clone()
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection<int,mixed> chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed|null first(array|string $columns)
     * @method static mixed firstOrFail(array|string $columns, string|null $message)
     * @method static mixed sole(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl tap(callable $callback)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl|\TWhenReturnType when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Database\Eloquent\Builder|UserWithdrawl|\TUnlessReturnType unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class UserWithdrawl extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

}